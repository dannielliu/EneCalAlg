#define gepep_kpi_cxx
#include "gepep_kpi.h"
#include <TH1.h>
#include <TH2.h>
#include "TGaxis.h"
#include "TPad.h"
#include <TStyle.h>
#include <TCanvas.h>
#include "function.h"
#include "TF1.h"
#include "TF2.h"
//#include <fstream>
#include "Pars.h"
#include "TGraphErrors.h"
#include <fstream>
#include "RooFit.h"
#include "RooRealVar.h"
#include "RooGaussian.h"
#include "RooChebychev.h"
#include "RooDataHist.h"
#include "RooAddPdf.h"
#include "RooArgList.h"
#include "RooPlot.h"
//#include <iostream>
extern std::string outputdir;
using RooFit::Title;
using RooFit::Components;
using RooFit::LineStyle;
using RooFit::LineColor;
using RooFit::Range;

extern std::string outputdir;
extern std::vector<double> px1,py1,pz1,px2,py2,pz2;
extern double m0;
extern double mparticle,mparticle2,mparticle3,mparticle4;
extern double sigma;
extern double weight,width;
//extern double factor2;

void gepep_kpi::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L gepep_kpi.C
//      Root > gepep_kpi t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   std::cout<<"Toral entry is "<<nentries<<std::endl;
   ofstream ofpar;
   ofpar.open("parkpi.txt",std::ios::app);
   ofstream detail;
   detail.open("detailkpi.txt",std::ios::app);
   detail<<"k- pi+ algrithm: will give factors for pion"<<std::endl;
   ofstream purepar;
   purepar.open("par");
   // for saving the fit result

   Long64_t nbytes = 0, nb = 0;
   double factor,factorlow,factorup;
   double minimum;
   double minx,miny;
   std::string tmpstr;
   //ParMap kmap("parkk.txt");
   TH1D *h1 = new TH1D("h1","momentum of kaon",100,0,3.0);
   TH1D *h2 = new TH1D("h2","momentum of kaon",100,0,3.0);
   h2->SetLineColor(2);
   double D0low=1.82;
   double D0up=1.90;
   double mk=0.493677;
   double mpi=0.13957018;
   double peakvalue=1.86486;// mD0
 
   // try to use roofit
   RooRealVar x("x","energy",1.865,D0low,D0up,"GeV");
   RooRealVar mean("mean","mean of gaussian",1.865,D0low,D0up);
   RooRealVar sigma1("sigma1","width of gaussian",0.0068,0.006,0.008);
   RooGaussian gaus("gaus","gauss(x,m,s)",x,mean,sigma1);
   RooRealVar co1("co1","coefficient #1",0,-100000.,100000.);
   RooChebychev bkg("bkg","background",x,RooArgList(co1));
   RooRealVar signal("signal"," ",12000,10,1000000);//event number
   RooRealVar background("background"," ",2000,0,100000);
   RooPlot *xframe;
   RooDataHist *data_kpi;
   RooAddPdf *sum;
 
   TH1D *hmass   = new TH1D("hmass","k- pi+ invariant mass",100,D0low,D0up);
   //TH1D *hmass   = new TH1D("h1","k- pi+ invariant mass",nBins,D0low,D0up);
   TCanvas *c1= new TCanvas("","",800,600);
   // ~~~~~~~~~pion part~~~~~~~~~~

   m0 = 1.86486;//mD0
   sigma=0.00687;
   mparticle =0.13957018;//mpion
   mparticle2=0.493677;//mkaon
   // prefit
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   nbytes += nb;

     //double kamp = TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
     //if (kamp<0.63) continue;
     double mass;
     double totpx,totpy,totpz,tote;
     double e[2];
     int besidx=0;
     double tmpdeltaold=100;
     double tmpmass;
     for(int i=0; i<npip;i++){
       totpx=pippx[i]+kampx[0];
       totpy=pippy[i]+kampy[0];
       totpz=pippz[i]+kampz[0];
       e[0]=TMath::Sqrt(mpi*mpi + 
            (pippx[i]*pippx[i]+pippy[i]*pippy[i]+pippz[i]*pippz[i]));
       e[1]=TMath::Sqrt(mk*mk + 
            (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
       tote=e[0]+e[1];
       tmpmass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
       if(fabs(tmpmass-peakvalue)<tmpdeltaold){
         tmpdeltaold = fabs(tmpmass-peakvalue);
         besidx = i;
       }
     }
     //std::cout<<"best index is "<<besidx<<std::endl;
     // total invariant mass, D0 -> k- pi+
     totpx=pippx[besidx]+kampx[0];
     totpy=pippy[besidx]+kampy[0];
     totpz=pippz[besidx]+kampz[0];
     e[0]=TMath::Sqrt(mpi*mpi + 
          (pippx[besidx]*pippx[besidx]+pippy[besidx]*pippy[besidx]+pippz[besidx]*pippz[besidx]));
     e[1]=TMath::Sqrt(mk*mk + 
          (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
     tote=e[0]+e[1];
     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
     hmass->Fill(mass);
     // if (Cut(ientry) < 0) continue;
   }
   char tmpchr[100];
   sprintf(tmpchr,"data_kpi");
   data_kpi = new RooDataHist(tmpchr,"data_kpi",x,hmass);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
   mean.setVal(peakvalue);
   //sigma1.setVal(0.035);
   signal.setVal(60);
   background.setVal(80);
   co1.setVal(0);
   sum->fitTo(*data_kpi,Range(D0low,D0up));
   xframe = x.frame(Title("fit k pi"));
   data_kpi->plotOn(xframe);
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(bkg),LineStyle(2),LineColor(3));
   xframe->Draw();
   sprintf(tmpchr,"%s/fitkpi_pre.eps",outputdir.c_str());
   c1->Print(tmpchr);
  ofpar<<"pre\t"<<mean.getVal()<<"\t"<<mean.getError()<<"\t"<<sigma1.getVal()<<"\t"<<sigma1.getError()<<std::endl;
   //ofpar<<"pre\t"<<hmass[part]->GetMean()<<std::endl;
   ofpar<<"\t"<<signal.getVal()<<"\t"<<signal.getError()<<"\t"<<background.getVal()<<"\t"<<background.getError();
   ofpar<<"\t"<<signal.getVal()/(signal.getVal()+background.getVal())<<std::endl;
   delete data_kpi;
   //delete xframe;
   delete sum;
   
   //likelihood method
   //factor2 = 0.99751;// factor for kaon
   width = 10.*sigma;
   px1.clear();
   px2.clear();
   py1.clear();
   py2.clear();
   pz1.clear();
   pz2.clear();
   //nb = fChain->GetEntry(1);   nbytes += nb;
   //factor2 = kmap.GetPar(run);
   //factor2 = 1.0;
   //detail<<"factor kaon was "<<factor2<<std::endl;
 
   for (Long64_t  jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   nbytes += nb;

     //if(ngam>0) continue;
     //if(npip>1 ) continue;
     double mass;
     double totpx,totpy,totpz,tote;
     double totp;
     double e[2];
     int besidx=0;
     double tmpdeltaold=100;
     double tmpmass;
     // search for best pi+
     for(int i=0; i<npip;i++){
       double kamp = TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
       //if (kamp<0.63) continue;
       totpx=pippx[i]+kampx[0];
       totpy=pippy[i]+kampy[0];
       totpz=pippz[i]+kampz[0];
       e[0]=TMath::Sqrt(mparticle*mparticle + 
    	  (pippx[i]*pippx[i]+pippy[i]*pippy[i]+pippz[i]*pippz[i]));
       e[1]=TMath::Sqrt(mparticle2*mparticle2 + 
    	  (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
       tote=e[0]+e[1];
       tmpmass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
       if(fabs(tmpmass-m0)<tmpdeltaold){
         tmpdeltaold = fabs(tmpmass-m0);
         besidx = i;
       }
     }
     // total invariant mass, D0 -> k- pi+
     totpx=pippx[besidx]+kampx[0];
     totpy=pippy[besidx]+kampy[0];
     totpz=pippz[besidx]+kampz[0];
     e[0]=TMath::Sqrt(mparticle*mparticle + 
    	  (pippx[besidx]*pippx[besidx]+pippy[besidx]*pippy[besidx]+pippz[besidx]*pippz[besidx]));
     e[1]=TMath::Sqrt(mparticle2*mparticle2 + 
          (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
     tote=e[0]+e[1];
     //totp=TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
     //if(totp>1.0) continue;
     //h1->Fill(totp);
     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
     if (mass>m0-width/2. && m0<m0+width/2.){
       //h2->Fill(totp);
       px1.push_back(pippx[besidx]);
       px2.push_back(kampx[0]);
       py1.push_back(pippy[besidx]);
       py2.push_back(kampy[0]);
       pz1.push_back(pippz[besidx]);
       pz2.push_back(kampz[0]);
     }
   }
   TCanvas *c2=new TCanvas("c2","likelihood",800,600);
   /*h1->Draw();
   c2->Update();
   double rightmax = 1.1*h2->GetMaximum();
   h2->Scale(gPad->GetUymax()/rightmax);
   h2->Draw("same");
   TGaxis *axis = new TGaxis(gPad->GetUxmax(),gPad->GetUymin(),
                            gPad->GetUxmax(),gPad->GetUymax(),
		        0,rightmax,510,"+L");
   axis->SetLineColor(kRed);
   axis->SetLabelColor(kRed);
   axis->Draw();
   c2->Print("momentumk.eps");
   */
   std::cout<<"m0 is "<<m0<<", data size is "<<px1.size()<<std::endl;
   //TF2 *likeli=new TF2("likeli",maxlikelihood2_0,0.95,1.05,0.01,0.99);
   //likeli->SetNpy(100);
   //likeli->Draw("surf1");
   //tmpstr=outputdir+"/likelikpi_2D.eps";
   //c2->Print(tmpstr.c_str());
   //minimum = likeli->GetMinimum(0.98,1.02);
   //factor=likeli->GetMinimumX(0.98,1.02);
   //likeli->GetMinimumXY(factor,miny);
   //weight = miny;
   double sigNo=signal.getVal() ;
   double bckNo=width/(D0up-D0low)*background.getVal();
   weight = sigNo/(sigNo+bckNo);
   TF1 *likeli_1=new TF1("likeli_1",maxlikelihood2_1,0.95,1.05);
   likeli_1->Draw();
   tmpstr=outputdir+"/likelikpi_1D.eps";
   c2->Print(tmpstr.c_str());
   minimum = likeli_1->GetMinimum(0.98,1.02);
   factor = likeli_1->GetMinimumX(0.98,1.02);
   factorlow=likeli_1->GetX(minimum+1,0.98,factor);
   factorup =likeli_1->GetX(minimum+1,factor,1.02);
   ofpar<<run<<"\t"<<factor<<"\t"<<factorlow<<"\t"<<factorup<<"\t"<<weight<<std::endl;
   detail<<"weight is "<<miny<<", factor is "<<likeli_1->GetMinimumX(0.98,1.01)<<std::endl;
   //detail<<"minimum 2D  "<<likeli->GetMinimum()<<", minimum 1D "<<likeli_1->GetMinimum()<<std::endl;
   detail<<"best factor  "<<likeli_1->GetMinimumX(0.99,1.01)<<std::endl;
   purepar<<factor<<"\t"<<(factorup-factorlow)/2<<"\t";
   
   // use the factor to refit
   hmass->Reset();
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   nbytes += nb;
         
     double kamp = TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
     //if (kamp<0.63) continue;
     double mass;
     double totpx,totpy,totpz,tote;
     double e[2];
     int besidx=0;
     double tmpdeltaold=100;
     double tmpmass;
     for(int i=0; i<npip;i++){
       totpx=pippx[i]+kampx[0];
       totpy=pippy[i]+kampy[0];
       totpz=pippz[i]+kampz[0];
       e[0]=TMath::Sqrt(mpi*mpi + 
            (pippx[i]*pippx[i]+pippy[i]*pippy[i]+pippz[i]*pippz[i]));
       e[1]=TMath::Sqrt(mk*mk + 
            (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
       tote=e[0]+e[1];
       tmpmass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
       if(fabs(tmpmass-peakvalue)<tmpdeltaold){
         tmpdeltaold = fabs(tmpmass-peakvalue);
         besidx = i;
       }
     }
     //std::cout<<"best index is "<<besidx<<std::endl;
     // total invariant mass, D0 -> k- pi+
     totpx=factor*(pippx[besidx]+kampx[0]);
     totpy=factor*(pippy[besidx]+kampy[0]);
     totpz=factor*(pippz[besidx]+kampz[0]);
     e[0]=TMath::Sqrt(mpi*mpi + 
          factor*factor*(pippx[besidx]*pippx[besidx]+pippy[besidx]*pippy[besidx]+pippz[besidx]*pippz[besidx]));
     e[1]=TMath::Sqrt(mk*mk + 
          factor*factor*(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
     tote=e[0]+e[1];
     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
     hmass->Fill(mass);
     // if (Cut(ientry) < 0) continue;
   }
   //char tmpchr[100];
   sprintf(tmpchr,"data_kpi");
   data_kpi = new RooDataHist(tmpchr,"data_kpi",x,hmass);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
   mean.setVal(peakvalue+0.05*(factor-1.0));
   //sigma1.setVal(0.035);
   signal.setVal(60);
   background.setVal(80);
   co1.setVal(0);
   sum->fitTo(*data_kpi,Range(D0low,D0up));
   //xframe = x.frame(Title("fit k pi"));
   data_kpi->plotOn(xframe);
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(bkg),LineStyle(2),LineColor(3));
   xframe->Draw();
   sprintf(tmpchr,"%s/fitkpi_re.eps",outputdir.c_str());
   c1->Print(tmpchr);
   ofpar<<"refit\t"<<mean.getVal()<<"\t"<<mean.getError()<<"\t"<<sigma1.getVal()<<"\t"<<sigma1.getError()<<std::endl;
   //ofpar<<"pre\t"<<hmass[part]->GetMean()<<std::endl;
   ofpar<<"\t"<<signal.getVal()<<"\t"<<signal.getError()<<"\t"<<background.getVal()<<"\t"<<background.getError();
   ofpar<<"\t"<<signal.getVal()/(signal.getVal()+background.getVal())<<"\n"<<std::endl;
   delete data_kpi;
   delete xframe;
   delete sum;
 
   // ~~~~~~~~~pion part end~~~~~~~~~~
  
   ofpar.close();
   detail.close();

}

#ifdef gepep_kpi_cxx
gepep_kpi::gepep_kpi(TTree *tree) : fChain(0) 
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("data/RValue_kpi_3850.root");
      if (!f || !f->IsOpen()) {
         f = new TFile("data/RValue_kpi_3850.root");
      }
      f->GetObject("gepep_kpi",tree);

   }
   Init(tree);
}

gepep_kpi::~gepep_kpi()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t gepep_kpi::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t gepep_kpi::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->GetTreeNumber() != fCurrent) {
      fCurrent = fChain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void gepep_kpi::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("run", &run, &b_run);
   fChain->SetBranchAddress("rec", &rec, &b_rec);
   fChain->SetBranchAddress("evttag", &evttag, &b_evttag);
   fChain->SetBranchAddress("indexmc", &indexmc, &b_indexmc);
   fChain->SetBranchAddress("pdgid", pdgid, &b_pdgid);
   fChain->SetBranchAddress("motheridx", motheridx, &b_motheridx);
   fChain->SetBranchAddress("ngch", &ngch, &b_ngch);
   fChain->SetBranchAddress("ncharg", &ncharg, &b_ncharg);
   fChain->SetBranchAddress("nneu", &nneu, &b_nneu);
   fChain->SetBranchAddress("nkap", &nkap, &b_nkap);
   fChain->SetBranchAddress("kappx", kappx, &b_kappx);
   fChain->SetBranchAddress("kappy", kappy, &b_kappy);
   fChain->SetBranchAddress("kappz", kappz, &b_kappz);
   fChain->SetBranchAddress("kape", kape, &b_kape);
   fChain->SetBranchAddress("nkam", &nkam, &b_nkam);
   fChain->SetBranchAddress("kampx", kampx, &b_kampx);
   fChain->SetBranchAddress("kampy", kampy, &b_kampy);
   fChain->SetBranchAddress("kampz", kampz, &b_kampz);
   fChain->SetBranchAddress("kame", kame, &b_kame);
   fChain->SetBranchAddress("npip", &npip, &b_npip);
   fChain->SetBranchAddress("pippx", pippx, &b_pippx);
   fChain->SetBranchAddress("pippy", pippy, &b_pippy);
   fChain->SetBranchAddress("pippz", pippz, &b_pippz);
   fChain->SetBranchAddress("pipe", pipe, &b_pipe);
   fChain->SetBranchAddress("npim", &npim, &b_npim);
   fChain->SetBranchAddress("pimpx", pimpx, &b_pimpx);
   fChain->SetBranchAddress("pimpy", pimpy, &b_pimpy);
   fChain->SetBranchAddress("pimpz", pimpz, &b_pimpz);
   fChain->SetBranchAddress("pime", pime, &b_pime);
   fChain->SetBranchAddress("kkm4", &kkm4, &b_kkm4);
   Notify();
}

Bool_t gepep_kpi::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void gepep_kpi::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t gepep_kpi::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef gepep_kpi_cxx
