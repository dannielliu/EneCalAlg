#define gepep_kpi_cxx
#include "gepep_kpi.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "function.h"
#include "TF1.h"
#include "TF2.h"
#include <fstream>
//#include <iostream>
extern std::string outputdir;
extern std::vector<double> px1,py1,pz1,px2,py2,pz2;
extern double m0;
extern double mparticle,mparticle2,mparticle3,mparticle4;
extern double sigma;
extern double weight,width;
extern double factor2;

void gepep_kpi::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L gepep_kpi.C
//      Root > gepep_kpi t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   std::cout<<"Toral entry is "<<nentries<<std::endl;
   ofstream ofpar;
   ofpar.open("parkpi.txt",std::ios::app);
   ofpar<<"k- pi+ algrithm: will give factors for pion"<<std::endl;
   ofstream ofpardetail;
   ofpardetail.open("detail.txt",std::ios::app);
   // for saving the fit result

   Long64_t nbytes = 0, nb = 0;
   double factor,factorlow,factorup;
   double minimum;
   double minx,miny;
   std::string tmpstr;

   // ~~~~~~~~~pion(use kaon factor) part~~~~~~~~~~
   m0 = 1.86486;//mD0
   sigma=0.00687;
   mparticle=0.13957018;//mpion
   mparticle2=0.493677;//mkaon
   factor2 = 0.99751;// factor for kaon
   width = 10.*sigma;
   px1.clear();
   px2.clear();
   py1.clear();
   py2.clear();
   pz1.clear();
   pz2.clear();

   for (Long64_t  jentry=0; jentry<nentries;jentry++) {
     Long64_t ientry = LoadTree(jentry);
     if (ientry < 0) break;
     nb = fChain->GetEntry(jentry);   nbytes += nb;

     //if(ngam>0) continue;
     //if(npip>1 ) continue;
     double mass;
     double totpx,totpy,totpz,tote;
     double e[2];
     int besidx=0;
     double tmpdeltaold=100;
     double tmpmass;
     for(int i=0; i<npip;i++){
       totpx=pippx[i]+kampx[0];
       totpy=pippy[i]+kampy[0];
       totpz=pippz[i]+kampz[0];
       e[0]=TMath::Sqrt(mparticle*mparticle + 
    	  (pippx[i]*pippx[i]+pippy[i]*pippy[i]+pippz[i]*pippz[i]));
       e[1]=TMath::Sqrt(mparticle2*mparticle2 + 
    	  (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
       tote=e[0]+e[1];
       tmpmass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
       if(fabs(tmpmass-m0)<tmpdeltaold){
         tmpdeltaold = fabs(tmpmass-m0);
         besidx = i;
       }
     }
     // total invariant mass, D0 -> k- pi+
     totpx=pippx[besidx]+kampx[0];
     totpy=pippy[besidx]+kampy[0];
     totpz=pippz[besidx]+kampz[0];
     e[0]=TMath::Sqrt(mparticle*mparticle + 
    	  (pippx[besidx]*pippx[besidx]+pippy[besidx]*pippy[besidx]+pippz[besidx]*pippz[besidx]));
     e[1]=TMath::Sqrt(mparticle2*mparticle2 + 
          (kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]));
     tote=e[0]+e[1];
     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
     if (mass>m0-width/2. && m0<m0+width/2.){
       px1.push_back(pippx[besidx]);
       px2.push_back(kampx[0]);
       py1.push_back(pippy[besidx]);
       py2.push_back(kampy[0]);
       pz1.push_back(pippz[besidx]);
       pz2.push_back(kampz[0]);
     }
   }

   std::cout<<"m0 is "<<m0<<", data size is "<<px1.size()<<std::endl;
   TF2 *likeli=new TF2("likeli",maxlikelihood2_0,0.95,1.05,0.01,0.99);
   //likeli->SetNpy(100);
   TCanvas *c2=new TCanvas("c2","likelihood",800,600);
   likeli->Draw("surf1");
   tmpstr=outputdir+"/likelikpi_2D.eps";
   c2->Print(tmpstr.c_str());
   //minimum = likeli->GetMinimum(0.98,1.02);
   //factor=likeli->GetMinimumX(0.98,1.02);
   likeli->GetMinimumXY(factor,miny);
   weight = miny;
   TF1 *likeli_1=new TF1("likeli_1",maxlikelihood2_1,0.95,1.05);
   likeli_1->Draw();
   tmpstr=outputdir+"/likelikpi_1D.eps";
   c2->Print(tmpstr.c_str());
   minimum = likeli_1->GetMinimum(0.98,1.02);
   factorlow=likeli_1->GetX(minimum+1,0.98,factor);
   factorup =likeli_1->GetX(minimum+1,factor,1.02);
   ofpar<<factor<<"\t"<<factorlow<<"\t"<<factorup<<std::endl;
   ofpar<<"weight is "<<miny<<", factor is "<<likeli_1->GetMinimumX(0.98,1.01)<<std::endl;
   std::cout<<"minimum 2D  "<<likeli->GetMinimum()<<", minimum 1D "<<likeli_1->GetMinimum()<<std::endl;
   std::cout<<"best factor  "<<likeli_1->GetMinimumX(0.99,1.01)<<std::endl;

   // ~~~~~~~~~pion part end~~~~~~~~~~
  
   ofpar.close();
   ofpardetail.close();

}

#ifdef gepep_kpi_cxx
gepep_kpi::gepep_kpi(TTree *tree) : fChain(0) 
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("data/RValue_kpi_3850.root");
      if (!f || !f->IsOpen()) {
         f = new TFile("data/RValue_kpi_3850.root");
      }
      f->GetObject("gepep_kpi",tree);

   }
   Init(tree);
}

gepep_kpi::~gepep_kpi()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t gepep_kpi::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t gepep_kpi::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->GetTreeNumber() != fCurrent) {
      fCurrent = fChain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void gepep_kpi::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("run", &run, &b_run);
   fChain->SetBranchAddress("rec", &rec, &b_rec);
   fChain->SetBranchAddress("evttag", &evttag, &b_evttag);
   fChain->SetBranchAddress("indexmc", &indexmc, &b_indexmc);
   fChain->SetBranchAddress("pdgid", pdgid, &b_pdgid);
   fChain->SetBranchAddress("motheridx", motheridx, &b_motheridx);
   fChain->SetBranchAddress("ngch", &ngch, &b_ngch);
   fChain->SetBranchAddress("ncharg", &ncharg, &b_ncharg);
   fChain->SetBranchAddress("nneu", &nneu, &b_nneu);
   fChain->SetBranchAddress("nkap", &nkap, &b_nkap);
   fChain->SetBranchAddress("kappx", kappx, &b_kappx);
   fChain->SetBranchAddress("kappy", kappy, &b_kappy);
   fChain->SetBranchAddress("kappz", kappz, &b_kappz);
   fChain->SetBranchAddress("kape", kape, &b_kape);
   fChain->SetBranchAddress("nkam", &nkam, &b_nkam);
   fChain->SetBranchAddress("kampx", kampx, &b_kampx);
   fChain->SetBranchAddress("kampy", kampy, &b_kampy);
   fChain->SetBranchAddress("kampz", kampz, &b_kampz);
   fChain->SetBranchAddress("kame", kame, &b_kame);
   fChain->SetBranchAddress("npip", &npip, &b_npip);
   fChain->SetBranchAddress("pippx", pippx, &b_pippx);
   fChain->SetBranchAddress("pippy", pippy, &b_pippy);
   fChain->SetBranchAddress("pippz", pippz, &b_pippz);
   fChain->SetBranchAddress("pipe", pipe, &b_pipe);
   fChain->SetBranchAddress("npim", &npim, &b_npim);
   fChain->SetBranchAddress("pimpx", pimpx, &b_pimpx);
   fChain->SetBranchAddress("pimpy", pimpy, &b_pimpy);
   fChain->SetBranchAddress("pimpz", pimpz, &b_pimpz);
   fChain->SetBranchAddress("pime", pime, &b_pime);
   fChain->SetBranchAddress("kkm4", &kkm4, &b_kkm4);
   Notify();
}

Bool_t gepep_kpi::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void gepep_kpi::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t gepep_kpi::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef gepep_kpi_cxx
