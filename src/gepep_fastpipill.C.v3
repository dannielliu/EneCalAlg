#define gepep_fastpipill_cxx
#include "gepep_fastpipill.h"
#include <TH1D.h>
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include <TMath.h>
//#include <TStyle.h>
#include <TF1.h>
#include "function.h"
#include "bes3plotstyle.h"
#include "TLegend.h"
#include "TGraphErrors.h"
//#include <stdlib.h>
#include <fstream>
//#include <string>
#include "RooFit.h"
#include "RooRealVar.h"
#include "RooGaussian.h"
#include "RooChebychev.h"
#include "RooDataHist.h"
#include "RooAddPdf.h"
#include "RooArgList.h"
#include "RooPlot.h"
extern std::string outputdir;
using RooFit::Title;
using RooFit::Components;
using RooFit::LineStyle;
using RooFit::LineColor;
using RooFit::Range;

bool gepep_fastpipill::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L gepep_fastpipill.C
//      Root > gepep_fastpipill t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return false;
   Long64_t nentries = fChain->GetEntriesFast();

   std::cout<<"Toral entry is "<<nentries<<std::endl;
   //int nBins=12;
   int nBins=20;
   double NBratio=((double)nentries)/nBins;
   double psilow=3.0;
   double psiup=3.2;
   double psiplow=3.65;
   double psipup=3.73;
   double factorstart=0.99;
   // for factor fit
   TF1 *facfit = new TF1("facfit",line2,3.0,3.2,2);

   // try to use roofit
   RooRealVar x("x","energy",3.097,3.0,3.2,"GeV");
   RooRealVar mean("mean","mean of gaussian",3.0,3.8);
   RooRealVar sigma("sigma","width of gaussian",0.023,0.010,0.025);
   RooRealVar sigma2("sigma2","width of gaussian",0.023,0.005,0.025);
   RooGaussian gaus("gaus","gauss(x,m,s)",x,mean,sigma);
   RooGaussian gaus2("gaus2","gauss(x,m,s)",x,mean,sigma2);
   RooRealVar co1("co1","coefficient #1",0,-3.,3.);
   RooChebychev bkg("bkg","background",x,RooArgList(co1));
   RooRealVar signal("signal"," ",5000,10,100000);//event number
   RooRealVar signal0("signal0"," ",100,1,10000);//event number
   RooRealVar background("background"," ",10,0,10000);
  // RooAddPdf sum("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));

   double par1[6];// for e
   double parerr1[6];
   double par2[6];// for mu
   double parerr2[6];
   double par3[6];// for pi
   double parerr3[6];
   ofstream ofpar;
   ofpar.open("parpipill.txt",std::ios::app);
   ofpar<<"fastpipi algrithm: will give factors for e,mu,pi"<<std::endl;
   ofstream ofpardetail;
   ofpardetail.open("detail.txt",std::ios::app);

   TCanvas *c1=new TCanvas("","",800,600);
   TH1D *h1   = new TH1D("h1","2 electron invariant mass",nBins,psilow,psiup);
   //TH1D *h1_1 = new TH1D("h1_1","2 electron invariant mass",nBins,psilow,psiup);
   TH1D *h2   = new TH1D("h2","2 muon invariant mass",nBins,psilow,psiup);
   //TH1D *h2_1 = new TH1D("h2_1","2 muon invariant mass",nBins,psilow,psiup);
   TH1D *h3   = new TH1D("h3","total invariant mass(e)",nBins,psiplow,psipup);
   TH1D *h4   = new TH1D("h4","total invariant mass(mu)",nBins,psiplow,psipup);
   //TH1D *h3_1 = new TH1D("h3_1","total invariant mass",nBins,psiplow,psipup);

   // Roofit part
   RooAddPdf *sum;
   RooDataHist *data_e;
   RooDataHist *data_mu;
   RooDataHist *data_pi;
   RooPlot *xframe=x.frame(Title("xxxxxxx"));

   // for initial spectrum
   Long64_t nbytes = 0, nb = 0;
   /*
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      
	  if(cos(angle4)>0.90) continue; // cut bhabha 
	  if(decay_ee==1)
	    h1_1->Fill(llm4);
	  else
	    h2_1->Fill(llm4);
	  h3_1->Fill(psipm4);
	  // 2 pi invariant mass
      // if (Cut(ientry) < 0) continue;
   }*/

   // try to correct the spectrum
   // iniialize the fit function
   double me=0.000511;
   double mmu=0.105658;
   double mpi=0.13957;
   double factor1,factor1err;// for e+,e-
   double factor2,factor2err;// for mu+,mu-
   double factor3,factor3err;// for pi
   double factor4,factor4err;// for pi

   // psi 3.097
   const int pointNo=20;
   double factor=factorstart;
   double factorstep=(1.-factor)*2/pointNo;
   double peakvalue=3.096916;
   double deltapeak=0.002;
   int fittimes=0;
   double factors[pointNo];
   double factorserr[pointNo];
   double deltapeaks[pointNo];
   double deltapeakserr[pointNo];
   double errsum=0;
   std::string fitepsname;
   std::string fiteps_start;
   std::string fiteps_stop;
   std::string tmpstr;
   TLegend *legend = new TLegend(0.1,0.7,0.3,0.9);
   gStyle->SetOptStat(0);
   gStyle->SetOptFit(1111);

//~~~~~~~~~electron part~~~~~~~~~~
   // for saving the fit result
   fitepsname  =outputdir+"/fitee.eps";
   fiteps_start=fitepsname+"[";
   fiteps_stop =fitepsname+"]";
   c1->Print(fiteps_start.c_str());
   // 
   x.setRange(psilow,psiup);
   mean.setRange(psilow,psiup);
   mean.setVal(3.097);

   for (int i=0;i<pointNo;i++){
      //xframe->Clear();
      delete xframe;
      xframe = x.frame(Title("fit e"));

      h1->Reset();
      std::cout<<"factor is "<<factor<<std::endl;
      for (Long64_t jentry=0; jentry<nentries;jentry++) {
         Long64_t ientry = LoadTree(jentry);
         if (ientry < 0) break;
         nb = fChain->GetEntry(jentry);   nbytes += nb;
         
		 if(ngam>0) continue;
	     double mass;
	     double totpx,totpy,totpz,tote;
		 double lee[2];
	     // total invariant mass
	     totpx=factor*(lepx4[0]+lepx4[1]);
	     totpy=factor*(lepy4[0]+lepy4[1]);
	     totpz=factor*(lepz4[0]+lepz4[1]);
		 if(cos(angle4)>0.90) continue; // cut bhabha 
		 if(decay_ee==0){
		   continue;
		 }
		 else if(decay_ee==1){
		   lee[0]=TMath::Sqrt(me*me + 
		          factor*factor*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
		   lee[1]=TMath::Sqrt(me*me +
		          factor*factor*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
		   //lee[0]=TMath::Sqrt(mmu*mmu+
		   //       factor*factor*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
		 }
		 else{
		   std::cout<<"can not identify lepton. "<<std::endl;
		   return false;
		 }

	     tote=lee[0]+lee[1];
	     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
	     h1->Fill(mass);
         // if (Cut(ientry) < 0) continue;
      }
	 
      char tmpchr[100];
      sprintf(tmpchr,"data_e_%d",fittimes);
      data_e = new RooDataHist(tmpchr,"data_e",x,h1);
      sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
      mean.setVal(3.097+3.3*(factor-1.0));
      //sigma.setVal(0.035);
      signal.setVal(120);
      background.setVal(20);
      co1.setVal(0);
      sum->fitTo(*data_e,Range(psilow,psiup));
      data_e->plotOn(xframe);
      //xframe->Draw();
      sum->plotOn(xframe);
      sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
      //sum->plotOn(xframe,Components(gaus2),LineStyle(4),LineColor(4));
      sum->plotOn(xframe,Components(bkg),LineStyle(3),LineColor(3));
      xframe->Draw();
      delete data_e;
      delete sum;

      // save pars
      factors[i]=factor;
      factorserr[i]=0;
      deltapeaks[i] = mean.getValV() - peakvalue;
      deltapeakserr[i] = mean.getError();

      c1->Print(fitepsname.c_str());
      fittimes++;
      factor += factorstep;
   }
   std::cout<<"entry is "<<nentries<<std::endl;
   c1->Print(fiteps_stop.c_str());
   c1->Clear();

  
   TGraphErrors *graph1 = new TGraphErrors(pointNo,factors,deltapeaks,factorserr,deltapeakserr);
   graph1->SetTitle("delta peak");
   graph1->Draw("AP");
   graph1->SetMarkerStyle(5);
   gStyle->SetOptFit(1111);
   facfit->SetParameters(1,0.3);
   facfit->SetParNames("factor","slope");
   graph1->Fit(facfit,"","",factors[0],factors[pointNo-1]);
   factor1=facfit->GetParameter(0);
   //errsum=0;
   //for (int i=0;i<pointNo;i++){
     //errsum += deltapeakserr[i];
   //}
   //factor1err=fabs(errsum/pointNo/(facfit->GetParameter(1)));
   //factor1err=facfit->GetParError(0);
   //ofpar<<factor1<<"\t"<<factor1err<<std::endl;
   //std::cout<<"fit factor: "<<factor1<<", error is "<<factor1err<<std::endl;
   tmpstr=outputdir+"/factore.eps";
   c1->Print(tmpstr.c_str());
 
   // draw the best factor fitting
   delete xframe;
   xframe = x.frame(Title("fit e")); 
   h1->Reset();
   factor = factor1;
   std::cout<<"factor is "<<factor<<std::endl;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
         
      if(ngam>0) continue;
      double mass;
      double totpx,totpy,totpz,tote;
      double lee[2];
      // total invariant mass
      totpx=factor*(lepx4[0]+lepx4[1]);
      totpy=factor*(lepy4[0]+lepy4[1]);
      totpz=factor*(lepz4[0]+lepz4[1]);
      if(cos(angle4)>0.90) continue; // cut bhabha 
      if(decay_ee==0){
        continue;
      }
      else if(decay_ee==1){
        lee[0]=TMath::Sqrt(me*me + 
               factor*factor*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(me*me +
               factor*factor*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else{
        std::cout<<"can not identify lepton. "<<std::endl;
        return false;
      }
      tote=lee[0]+lee[1];
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      h1->Fill(mass);
   }
   char tmpchr[100];
   sprintf(tmpchr,"data_e_%d",fittimes);
   data_e = new RooDataHist(tmpchr,"data_e",x,h1);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
   mean.setVal(3.097+3.3*(factor-1.0));
   //sigma.setVal(0.035);
   signal.setVal(120);
   background.setVal(20);
   co1.setVal(0);
   sum->fitTo(*data_e,Range(psilow,psiup));
   data_e->plotOn(xframe);
   //xframe->Draw();
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(bkg),LineStyle(2),LineColor(3));
   xframe->Draw();
   tmpstr=outputdir+"/fitee_best.eps";
   c1->Print(tmpstr.c_str());
   delete data_e;
   delete sum;

   // get factor and its error
   factor1=facfit->GetParameter(0);
   factor1err=TMath::Sqrt(TMath::Power(mean.getError()/facfit->GetParameter(1),2)
              +TMath::Power(facfit->GetParError(0),2));
   std::cout<<"aaaaaaaaaaaaa\n mean error, factor, factor error \n"<<mean.getError()<<facfit->GetParameter(1)<<facfit->GetParError(0)<<std::endl;
   ofpar<<factor1<<"\t"<<factor1err<<std::endl;


//~~~~~~~~~~~~~electron part end~~~~~~~~~~

//~~~~~~~~~~~~~muon part start~~~~~~~~~
   factor = factorstart;
   fittimes =0;
   deltapeak=0.002;
   // for saving the fit result
   fitepsname  =outputdir+"/fitmu.eps";
   fiteps_start=fitepsname+"[";
   fiteps_stop =fitepsname+"]";
   c1->Print(fiteps_start.c_str());
   //
   for (int i=0;i<pointNo;i++){
	  delete xframe;
      xframe = x.frame(Title("fit mu"));

	  h2->Reset();
      std::cout<<"factor is "<<factor<<std::endl;
      for (Long64_t jentry=0; jentry<nentries;jentry++) {
         Long64_t ientry = LoadTree(jentry);
         if (ientry < 0) break;
         nb = fChain->GetEntry(jentry);   nbytes += nb;
         
		 if(ngam>0) continue;
	     double mass;
	     double totpx,totpy,totpz,tote;
		 double lee[2];
	     totpx=factor*(lepx4[0]+lepx4[1]);
	     totpy=factor*(lepy4[0]+lepy4[1]);
	     totpz=factor*(lepz4[0]+lepz4[1]);
		 if(cos(angle4)>0.90) continue; // cut bhabha 
		 if(decay_ee==0){
		   lee[0]=TMath::Sqrt(mmu*mmu + 
		          factor*factor*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
		   lee[1]=TMath::Sqrt(mmu*mmu+
		          factor*factor*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
		 }
		 else if(decay_ee==1){
		   continue;
		 }
		 else{
		   std::cout<<"can not identify lepton. "<<std::endl;
		   return false;
		 }

	     //tote=lee4[0]+lee4[1]+pie4[0]+pie4[1];
	     tote=lee[0]+lee[1];
	     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
	     h2->Fill(mass);
         // if (Cut(ientry) < 0) continue;
      }
	  
	  char tmpchr[100];
	  sprintf(tmpchr,"data_mu_%2d",fittimes);
      data_mu = new RooDataHist(tmpchr,"data_mu",x,h2);
      mean.setVal(3.097+3.1*(factor-1.0));
	  //sigma.setVal(0.035);
	  signal.setVal(120);
	  background.setVal(10);
	  co1.setVal(0);
      sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
      sum->fitTo(*data_mu,Range(psilow,psiup));
	  data_mu->plotOn(xframe);
	  //xframe->Draw();
	  sum->plotOn(xframe);
	  sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
	  sum->plotOn(xframe,Components(bkg),LineStyle(2),LineColor(3));
      xframe->Draw();
	  delete data_mu;
	  delete sum;

	  // save pars
	  factors[i]=factor;
	  factorserr[i]=0;
	  deltapeaks[i] = mean.getValV() - peakvalue;
	  deltapeakserr[i] = mean.getError();

	  c1->Print(fitepsname.c_str());
	  fittimes++;
	  factor += factorstep;

      //std::cout<<"factor is "<<factor-1<<std::endl;
   }
   std::cout<<"entry is "<<nentries<<std::endl;
   c1->Print(fiteps_stop.c_str());
   c1->Clear();
   
   TGraphErrors *graph2 = new TGraphErrors(pointNo,factors,deltapeaks,factorserr,deltapeakserr);
   graph2->SetTitle("delta peak");
   graph2->Draw("AP");
   graph2->SetMarkerStyle(5);
   gStyle->SetOptFit(1111);
   facfit->SetParameters(1,0.3);
   facfit->SetParNames("factor","slope");
   graph2->Fit(facfit,"","",factors[0],factors[pointNo-1]);
   factor2=facfit->GetParameter(0);
   //errsum=0;
   //for (int i=0;i<pointNo;i++){
     //errsum += deltapeakserr[i];
   //}
   //factor1err=facfit->GetParError(0);
   //factor2err=fabs(errsum/pointNo/(facfit->GetParameter(1)));
   //factor2err=facfit->GetParError(0);
   ///ofpar<<factor2<<"\t"<<factor2err<<std::endl;
   //std::cout<<"fit factor: "<<factor2<<", error is "<<factor2err<<std::endl;
   tmpstr=outputdir+"/factormu.eps";
   c1->Print(tmpstr.c_str());

   delete xframe;
   xframe = x.frame(Title("fit mu"));
   factor=factor2;
   h2->Reset();
   std::cout<<"factor is "<<factor<<std::endl;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      if(ngam>0) continue;
      double mass;
      double totpx,totpy,totpz,tote;
      double lee[2];
      totpx=factor*(lepx4[0]+lepx4[1]);
      totpy=factor*(lepy4[0]+lepy4[1]);
      totpz=factor*(lepz4[0]+lepz4[1]);
      if(cos(angle4)>0.90) continue; // cut bhabha 
      if(decay_ee==0){
        lee[0]=TMath::Sqrt(mmu*mmu + 
               factor*factor*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(mmu*mmu+
               factor*factor*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else if(decay_ee==1){
        continue;
      }
      else{
        std::cout<<"can not identify lepton. "<<std::endl;
        return false;
      }
      tote=lee[0]+lee[1];
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      h2->Fill(mass);
   }
   sprintf(tmpchr,"data_mu_%2d",fittimes);
   data_mu = new RooDataHist(tmpchr,"data_mu",x,h2);
   mean.setVal(3.097+3.1*(factor-1.0));
   //sigma.setVal(0.035);
   signal.setVal(120);
   background.setVal(10);
   co1.setVal(0);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,bkg),RooArgList(signal,background));
   sum->fitTo(*data_mu,Range(psilow,psiup));
   data_mu->plotOn(xframe);
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(bkg),LineStyle(2),LineColor(3));
   xframe->Draw();
   delete data_mu;
   delete sum;
   tmpstr=outputdir+"/fitmu_best.eps";
   c1->Print(tmpstr.c_str());

   // get factor and its error
   factor2=facfit->GetParameter(0);
   factor2err=TMath::Sqrt(TMath::Power(mean.getError()/facfit->GetParameter(1),2)
              +TMath::Power(facfit->GetParError(0),2));
   ofpar<<factor2<<"\t"<<factor2err<<std::endl;

//~~~~~~~~~~~muon part end~~~~~~~~~

//~~~~~~~~~~~pion part start~~~~~~~~
   // iniialize the fit function
   // psi(2S) 3.686
   factor=factorstart;
   peakvalue=3.686109;
   //peakerror=0.0001;
   deltapeak=0.002;
   fittimes=0;

   // for saving the fit result
   fitepsname=outputdir+"/fitpi_e.eps";
   fiteps_start=fitepsname+"[";
   fiteps_stop =fitepsname+"]";
   c1->Print(fiteps_start.c_str());
   std::string fitepsname2=outputdir+"/fitpi_mu.eps";
   std::string fiteps2_start=fitepsname2+"[";
   std::string fiteps2_stop =fitepsname2+"]";
   c1->Print(fiteps2_start.c_str());
   //
   //x.setVal(3.686);
   x.setRange(psiplow,psipup);
   mean.setRange(psiplow,psipup);
   mean.setVal(3.686);
   double factors2[pointNo];
   double factorserr2[pointNo];
   double deltapeaks2[pointNo];
   double deltapeakserr2[pointNo];
   for (int i=0;i<pointNo;i++){
      h3->Reset();
      h4->Reset();
      std::cout<<"factor is "<<factor<<std::endl;
      for (Long64_t jentry=0; jentry<nentries;jentry++) {
         Long64_t ientry = LoadTree(jentry);
         if (ientry < 0) break;
         nb = fChain->GetEntry(jentry);   nbytes += nb;

         if(ngam>0) continue;
	     double mass,massjpsi;
	     double totpx,totpy,totpz,tote;
             double jpsipx,jpsipy,jpsipz,jpsie;
             double lee[2],pie[2];
	     // total invariant mass
	     if(cos(angle4)>0.90) continue; // cut bhabha 
	       if (decay_ee == 0){
                totpx=factor2*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
	       	totpy=factor2*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
	       	totpz=factor2*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
		   jpsipx=factor2*(lepx4[0]+lepx4[1]);
		   jpsipy=factor2*(lepy4[0]+lepy4[1]);
		   jpsipz=factor2*(lepz4[0]+lepz4[1]);
		   lee[0]=TMath::Sqrt(mmu*mmu + 
		          factor2*factor2*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
		   lee[1]=TMath::Sqrt(mmu*mmu +
		          factor2*factor2*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
		 }
		 else if(decay_ee==1){
     	   totpx=factor1*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
	       totpy=factor1*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
	       totpz=factor1*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
		   jpsipx=factor1*(lepx4[0]+lepx4[1]);
		   jpsipy=factor1*(lepy4[0]+lepy4[1]);
		   jpsipz=factor1*(lepz4[0]+lepz4[1]);
		   lee[0]=TMath::Sqrt(me*me + 
		          factor1*factor1*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
		   lee[1]=TMath::Sqrt(me*me +
		          factor1*factor1*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
		 }
		 else {
		   std::cout<<"can not identify lepton. "<<std::endl;
		   return false;
		 }
		 pie[0]=TMath::Sqrt(mpi*mpi+
		        factor*factor*(pipx4[0]*pipx4[0]+pipy4[0]*pipy4[0]+pipz4[0]*pipz4[0]) );
		 pie[1]=TMath::Sqrt(mpi*mpi+
		        factor*factor*(pipx4[1]*pipx4[1]+pipy4[1]*pipy4[1]+pipz4[1]*pipz4[1]) );

	     //tote=lee4[0]+lee4[1]+pie4[0]+pie4[1];
	     tote=lee[0]+lee[1]+pie[0]+pie[1];
		 jpsie=lee[0]+lee[1];
	     mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
	     massjpsi=TMath::Sqrt(jpsie*jpsie-jpsipx*jpsipx-jpsipy*jpsipy-jpsipz*jpsipz);
		 if (decay_ee == 1)
	       h3->Fill(mass-massjpsi+3.096916);
		 if (decay_ee == 0)
	       h4->Fill(mass-massjpsi+3.096916);

         // if (Cut(ientry) < 0) continue;
      }
	  
      delete xframe;
	  xframe = x.frame(Title("fit pi"));
	  char tmpchr[100];
	  sprintf(tmpchr,"data_pi_%2d",fittimes);
      data_pi = new RooDataHist(tmpchr,"data_pi",x,h3);
      mean.setVal(3.686+0.45*(factor-1.0));
	  sigma.setRange(0.002,0.004);
	  sigma.setVal(0.0023);
	  sigma2.setRange(0.005,0.03);
	  sigma2.setVal(0.014);
	  //signal.setVal(60);
	  //background.setVal(10);
	  co1.setVal(0);
      sum = new RooAddPdf("sum","sum",RooArgList(gaus,gaus2,bkg),RooArgList(signal,signal0,background));
      sum->fitTo(*data_pi,Range(psiplow,psipup));
	  data_pi->plotOn(xframe);
	  sum->plotOn(xframe);
	  sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
	  sum->plotOn(xframe,Components(gaus2),LineStyle(4),LineColor(4));
	  sum->plotOn(xframe,Components(bkg),LineStyle(3),LineColor(3));
      xframe->Draw();

	  // save pars
	  factors[i]=factor;
	  factorserr[i]=0;
	  deltapeaks[i] = mean.getValV() - peakvalue;
	  deltapeakserr[i] = mean.getError();

	  c1->Print(fitepsname.c_str());
	  delete sum;
	  delete data_pi;
	  
      delete xframe;
	  xframe = x.frame(Title("fit pi"));
	  sprintf(tmpchr,"data_pi_%2d",fittimes);
      data_pi = new RooDataHist(tmpchr,"data_pi",x,h4);
      mean.setVal(3.686+0.45*(factor-1.0));
	  sigma.setRange(0.002,0.004);
	  sigma.setVal(0.0023);
	  sigma2.setRange(0.005,0.03);
	  sigma2.setVal(0.014);
	  //signal.setVal(60);
	  //background.setVal(10);
	  co1.setVal(0);
      sum = new RooAddPdf("sum","sum",RooArgList(gaus,gaus2,bkg),RooArgList(signal,signal0,background));
      sum->fitTo(*data_pi,Range(psiplow,psipup));
	  data_pi->plotOn(xframe);
	  sum->plotOn(xframe);
	  sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
	  sum->plotOn(xframe,Components(gaus2),LineStyle(4),LineColor(4));
	  sum->plotOn(xframe,Components(bkg),LineStyle(3),LineColor(3));
      xframe->Draw();

	  // save pars
	  factors2[i]=factor;
	  factorserr2[i]=0;
	  deltapeaks2[i] = mean.getValV() - peakvalue;
	  deltapeakserr2[i] = mean.getError();

	  c1->Print(fitepsname2.c_str());
	  delete sum;
	  delete data_pi;


	  fittimes++;
	  factor += factorstep;
   }
   c1->Print(fiteps_stop.c_str());
   c1->Print(fiteps2_stop.c_str());

   c1->Clear();
   //double err[pointNo]={0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05,0.05};
   //TGraphErrors *graph3 = new TGraphErrors(pointNo,factors,deltapeaks,factorserr,err);//deltapeakserr);
   TGraphErrors *graph3 = new TGraphErrors(pointNo,factors,deltapeaks,factorserr,deltapeakserr);
   graph3->SetTitle("delta peak");
   graph3->Draw("AP");
   graph3->SetMarkerStyle(5);
   gStyle->SetOptFit(1111);
   facfit->SetParameters(1,0.3);
   facfit->SetParNames("factor","slope");
   graph3->Fit(facfit,"","",factors[0],factors[pointNo-1]);
   factor3=facfit->GetParameter(0);
   //errsum=0;
   //for (int i=0;i<pointNo;i++){
   //  errsum += deltapeakserr[i];
   //}
   //factor3err=fabs(errsum/pointNo/(facfit->GetParameter(1)));
   //factor3err=facfit->GetParError(0);
   //ofpar<<factor3<<"\t"<<factor3err<<std::endl;
   //std::cout<<"fit factor: "<<factor3<<", error is "<<factor3err<<std::endl;
   tmpstr=outputdir+"/factorpi_e.eps";
   c1->Print(tmpstr.c_str());
   delete graph3;
 
   delete xframe;
   xframe = x.frame(Title("fit pi"));
   h3->Reset();
   factor = factor3;
   std::cout<<"factor is "<<factor<<std::endl;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      if(ngam>0) continue;
      double mass,massjpsi;
      double totpx,totpy,totpz,tote;
      double jpsipx,jpsipy,jpsipz,jpsie;
      double lee[2],pie[2];
      // total invariant mass
      if(cos(angle4)>0.90) continue; // cut bhabha 
      if (decay_ee == 0){
        totpx=factor2*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
        totpy=factor2*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
        totpz=factor2*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
        jpsipx=factor2*(lepx4[0]+lepx4[1]);
        jpsipy=factor2*(lepy4[0]+lepy4[1]);
        jpsipz=factor2*(lepz4[0]+lepz4[1]);
        lee[0]=TMath::Sqrt(mmu*mmu + 
               factor2*factor2*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(mmu*mmu +
               factor2*factor2*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else if(decay_ee==1){
        totpx=factor1*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
        totpy=factor1*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
        totpz=factor1*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
        jpsipx=factor1*(lepx4[0]+lepx4[1]);
        jpsipy=factor1*(lepy4[0]+lepy4[1]);
        jpsipz=factor1*(lepz4[0]+lepz4[1]);
        lee[0]=TMath::Sqrt(me*me + 
               factor1*factor1*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(me*me +
               factor1*factor1*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else {
        std::cout<<"can not identify lepton. "<<std::endl;
        return false;
      }
      pie[0]=TMath::Sqrt(mpi*mpi+
             factor*factor*(pipx4[0]*pipx4[0]+pipy4[0]*pipy4[0]+pipz4[0]*pipz4[0]) );
      pie[1]=TMath::Sqrt(mpi*mpi+
             factor*factor*(pipx4[1]*pipx4[1]+pipy4[1]*pipy4[1]+pipz4[1]*pipz4[1]) );

      tote=lee[0]+lee[1]+pie[0]+pie[1];
      jpsie=lee[0]+lee[1];
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      massjpsi=TMath::Sqrt(jpsie*jpsie-jpsipx*jpsipx-jpsipy*jpsipy-jpsipz*jpsipz);
      if (mass > psiplow && mass < psipup)
        h3->Fill(mass-massjpsi+3.096916);
   }
   //char tmpchr[100];
   sprintf(tmpchr,"data_pi_%2d",fittimes);
   data_pi = new RooDataHist(tmpchr,"data_pi",x,h3);
   mean.setVal(3.686+0.45*(factor-1.0));
   sigma.setRange(0.002,0.004);
   sigma.setVal(0.0023);
   sigma2.setRange(0.005,0.03);
   sigma2.setVal(0.014);
   //signal.setVal(60);
   //background.setVal(10);
   co1.setVal(0);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,gaus2,bkg),RooArgList(signal,signal0,background));
   sum->fitTo(*data_pi,Range(psiplow,psipup));
   data_pi->plotOn(xframe);
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(gaus2),LineStyle(4),LineColor(4));
   sum->plotOn(xframe,Components(bkg),LineStyle(3),LineColor(3));
   xframe->Draw();
   tmpstr=outputdir+"/fitpi_e_best.eps";
   c1->Print(tmpstr.c_str());
   delete sum;
   delete data_pi;

   // get factor and its error
   factor3=facfit->GetParameter(0);
   factor3err=TMath::Sqrt(TMath::Power(mean.getError()/facfit->GetParameter(1),2)
              +TMath::Power(facfit->GetParError(0),2));
   ofpar<<factor3<<"\t"<<factor3err<<std::endl;
   
   c1->Clear();
   graph3 = new TGraphErrors(pointNo,factors2,deltapeaks2,factorserr2,deltapeakserr2);
   graph3->SetTitle("delta peak");
   graph3->Draw("AP");
   graph3->SetMarkerStyle(5);
   gStyle->SetOptFit(1111);
   facfit->SetParameters(1,0.3);
   facfit->SetParNames("factor","slope");
   graph3->Fit(facfit,"","",factors[0],factors[pointNo-1]);
   factor4=facfit->GetParameter(0);
   //errsum=0;
   //for (int i=0;i<pointNo;i++){
   //  errsum += deltapeakserr[i];
   //}
   //factor4err=fabs(errsum/pointNo/(facfit->GetParameter(1)));
   //factor4err=facfit->GetParError(0);
   //ofpar<<factor4<<"\t"<<factor4err<<std::endl;
   //std::cout<<"fit factor: "<<factor4<<", error is "<<factor4err<<std::endl;
   tmpstr=outputdir+"/factorpi_mu.eps";
   c1->Print(tmpstr.c_str());

   delete xframe;
   xframe = x.frame(Title("fit pi"));
   h4->Reset();
   factor = factor4;
   std::cout<<"factor is "<<factor<<std::endl;
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb;
      if(ngam>0) continue;
      double mass,massjpsi;
      double totpx,totpy,totpz,tote;
      double jpsipx,jpsipy,jpsipz,jpsie;
      double lee[2],pie[2];
      // total invariant mass
      if(cos(angle4)>0.90) continue; // cut bhabha 
      if (decay_ee == 0){
        totpx=factor2*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
        totpy=factor2*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
        totpz=factor2*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
        jpsipx=factor2*(lepx4[0]+lepx4[1]);
        jpsipy=factor2*(lepy4[0]+lepy4[1]);
        jpsipz=factor2*(lepz4[0]+lepz4[1]);
        lee[0]=TMath::Sqrt(mmu*mmu + 
               factor2*factor2*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(mmu*mmu +
               factor2*factor2*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else if(decay_ee==1){
        totpx=factor1*(lepx4[0]+lepx4[1])+factor*(pipx4[0]+pipx4[1]);
        totpy=factor1*(lepy4[0]+lepy4[1])+factor*(pipy4[0]+pipy4[1]);
        totpz=factor1*(lepz4[0]+lepz4[1])+factor*(pipz4[0]+pipz4[1]);
        jpsipx=factor1*(lepx4[0]+lepx4[1]);
        jpsipy=factor1*(lepy4[0]+lepy4[1]);
        jpsipz=factor1*(lepz4[0]+lepz4[1]);
        lee[0]=TMath::Sqrt(me*me + 
               factor1*factor1*(lepx4[0]*lepx4[0]+lepy4[0]*lepy4[0]+lepz4[0]*lepz4[0]) );
        lee[1]=TMath::Sqrt(me*me +
               factor1*factor1*(lepx4[1]*lepx4[1]+lepy4[1]*lepy4[1]+lepz4[1]*lepz4[1]) );
      }
      else {
        std::cout<<"can not identify lepton. "<<std::endl;
        return false;
      }
      pie[0]=TMath::Sqrt(mpi*mpi+
             factor*factor*(pipx4[0]*pipx4[0]+pipy4[0]*pipy4[0]+pipz4[0]*pipz4[0]) );
      pie[1]=TMath::Sqrt(mpi*mpi+
             factor*factor*(pipx4[1]*pipx4[1]+pipy4[1]*pipy4[1]+pipz4[1]*pipz4[1]) );

      tote=lee[0]+lee[1]+pie[0]+pie[1];
      jpsie=lee[0]+lee[1];
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      massjpsi=TMath::Sqrt(jpsie*jpsie-jpsipx*jpsipx-jpsipy*jpsipy-jpsipz*jpsipz);
      if (mass > psiplow && mass < psipup)
        h4->Fill(mass-massjpsi+3.096916);
   }
   
   //char tmpchr[100];
   sprintf(tmpchr,"data_pi_%2d",fittimes);
   data_pi = new RooDataHist(tmpchr,"data_pi",x,h4);
   mean.setVal(3.686+0.45*(factor-1.0));
   sigma.setRange(0.002,0.004);
   sigma.setVal(0.0023);
   sigma2.setRange(0.005,0.03);
   sigma2.setVal(0.014);
   //signal.setVal(60);
   //background.setVal(10);
   co1.setVal(0);
   sum = new RooAddPdf("sum","sum",RooArgList(gaus,gaus2,bkg),RooArgList(signal,signal0,background));
   sum->fitTo(*data_pi,Range(psiplow,psipup));
   data_pi->plotOn(xframe);
   sum->plotOn(xframe);
   sum->plotOn(xframe,Components(gaus),LineStyle(2),LineColor(2));
   sum->plotOn(xframe,Components(gaus2),LineStyle(4),LineColor(4));
   sum->plotOn(xframe,Components(bkg),LineStyle(3),LineColor(3));
   xframe->Draw();
   tmpstr=outputdir+"/fitpi_mu_best.eps";
   c1->Print(tmpstr.c_str());
   delete sum;
   delete data_pi;

   // get factor and its error
   factor4=facfit->GetParameter(0);
   factor4err=TMath::Sqrt(TMath::Power(mean.getError()/facfit->GetParameter(1),2)
              +TMath::Power(facfit->GetParError(0),2));
   ofpar<<factor4<<"\t"<<factor4err<<std::endl;



//~~~~~~~~~~~pion part end~~~~~~~~

   ofpar.close();
   ofpardetail.close();
   delete h1;
   //delete h1_1;
   delete h2;
   //delete h2_1;
   delete legend;
   delete c1;
   return true;
}


gepep_fastpipill::gepep_fastpipill(TTree *tree) : fChain(0) 
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("data_Rvalue_pipill_1.root");
      if (!f || !f->IsOpen()) {
         f = new TFile("data_Rvalue_pipill_1.root");
      }
      f->GetObject("gepep_fastpipill",tree);

   }
   Init(tree);
}

gepep_fastpipill::~gepep_fastpipill()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t gepep_fastpipill::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t gepep_fastpipill::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->GetTreeNumber() != fCurrent) {
      fCurrent = fChain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void gepep_fastpipill::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("run", &run, &b_run);
   fChain->SetBranchAddress("rec", &rec, &b_rec);
   fChain->SetBranchAddress("evttag", &evttag, &b_evttag);
   fChain->SetBranchAddress("indexmc", &indexmc, &b_indexmc);
   fChain->SetBranchAddress("pdgid", pdgid, &b_pdgid);
   fChain->SetBranchAddress("motheridx", motheridx, &b_motheridx);
   fChain->SetBranchAddress("mcgpx", mcgpx, &b_mcgpx);
   fChain->SetBranchAddress("mcgpy", mcgpy, &b_mcgpy);
   fChain->SetBranchAddress("mcgpz", mcgpz, &b_mcgpz);
   fChain->SetBranchAddress("mcge", mcge, &b_mcge);
   fChain->SetBranchAddress("mcgid", mcgid, &b_mcgid);
   fChain->SetBranchAddress("nGammatch", &nGammatch, &b_nGammatch);
   fChain->SetBranchAddress("ncharg", &ncharg, &b_ncharg);
   fChain->SetBranchAddress("ntot", &ntot, &b_ntot);
   fChain->SetBranchAddress("nneu", &nneu, &b_nneu);
   fChain->SetBranchAddress("ngch", &ngch, &b_ngch);
   fChain->SetBranchAddress("ngam", &ngam, &b_ngam);
   fChain->SetBranchAddress("npi0", &npi0, &b_npi0);
   fChain->SetBranchAddress("netap2", &netap2, &b_netap2);
   fChain->SetBranchAddress("delang", delang, &b_delang);
   fChain->SetBranchAddress("delphi", delphi, &b_delphi);
   fChain->SetBranchAddress("delthe", delthe, &b_delthe);
   fChain->SetBranchAddress("npart", npart, &b_npart);
   fChain->SetBranchAddress("nemchits", nemchits, &b_nemchits);
   fChain->SetBranchAddress("module", module, &b_module);
   fChain->SetBranchAddress("x", x, &b_x);
   fChain->SetBranchAddress("y", y, &b_y);
   fChain->SetBranchAddress("z", z, &b_z);
   fChain->SetBranchAddress("px", px, &b_px);
   fChain->SetBranchAddress("py", py, &b_py);
   fChain->SetBranchAddress("pz", pz, &b_pz);
   fChain->SetBranchAddress("theta", theta, &b_theta);
   fChain->SetBranchAddress("phi", phi, &b_phi);
   fChain->SetBranchAddress("dx", dx, &b_dx);
   fChain->SetBranchAddress("dy", dy, &b_dy);
   fChain->SetBranchAddress("dz", dz, &b_dz);
   fChain->SetBranchAddress("dtheta", dtheta, &b_dtheta);
   fChain->SetBranchAddress("dphi", dphi, &b_dphi);
   fChain->SetBranchAddress("energy", energy, &b_energy);
   fChain->SetBranchAddress("dE", dE, &b_dE);
   fChain->SetBranchAddress("eSeed", eSeed, &b_eSeed);
   fChain->SetBranchAddress("nSeed", nSeed, &b_nSeed);
   fChain->SetBranchAddress("e3x3", e3x3, &b_e3x3);
   fChain->SetBranchAddress("e5x5", e5x5, &b_e5x5);
   fChain->SetBranchAddress("secondMoment", secondMoment, &b_secondMoment);
   fChain->SetBranchAddress("latMoment", latMoment, &b_latMoment);
   fChain->SetBranchAddress("a20Moment", a20Moment, &b_a20Moment);
   fChain->SetBranchAddress("a42Moment", a42Moment, &b_a42Moment);
   fChain->SetBranchAddress("getTime", getTime, &b_getTime);
   fChain->SetBranchAddress("getEAll", getEAll, &b_getEAll);
   fChain->SetBranchAddress("mpi0", mpi0, &b_mpi0);
   fChain->SetBranchAddress("chisq1cpi0", chisq1cpi0, &b_chisq1cpi0);
   fChain->SetBranchAddress("ig1pi0", ig1pi0, &b_ig1pi0);
   fChain->SetBranchAddress("ig2pi0", ig2pi0, &b_ig2pi0);
   fChain->SetBranchAddress("chisq6c", &chisq6c, &b_chisq6c);
   fChain->SetBranchAddress("chisq4c", &chisq4c, &b_chisq4c);
   fChain->SetBranchAddress("chisq3c", &chisq3c, &b_chisq3c);
   fChain->SetBranchAddress("gpx4", gpx4, &b_gpx4);
   fChain->SetBranchAddress("gpy4", gpy4, &b_gpy4);
   fChain->SetBranchAddress("gpz4", gpz4, &b_gpz4);
   fChain->SetBranchAddress("ge4", ge4, &b_ge4);
   fChain->SetBranchAddress("lepx4", lepx4, &b_lepx4);
   fChain->SetBranchAddress("lepy4", lepy4, &b_lepy4);
   fChain->SetBranchAddress("lepz4", lepz4, &b_lepz4);
   fChain->SetBranchAddress("lee4", lee4, &b_lee4);
   fChain->SetBranchAddress("pipx4", pipx4, &b_pipx4);
   fChain->SetBranchAddress("pipy4", pipy4, &b_pipy4);
   fChain->SetBranchAddress("pipz4", pipz4, &b_pipz4);
   fChain->SetBranchAddress("pie4", pie4, &b_pie4);
   fChain->SetBranchAddress("ggm4", &ggm4, &b_ggm4);
   fChain->SetBranchAddress("kkm4", &kkm4, &b_kkm4);
   fChain->SetBranchAddress("kpi01m4", &kpi01m4, &b_kpi01m4);
   fChain->SetBranchAddress("kpi02m4", &kpi02m4, &b_kpi02m4);
   fChain->SetBranchAddress("kkpi0m4", &kkpi0m4, &b_kkpi0m4);
   fChain->SetBranchAddress("kkpipim4", &kkpipim4, &b_kkpipim4);
   fChain->SetBranchAddress("kkpipipi0m4", &kkpipipi0m4, &b_kkpipipi0m4);
   fChain->SetBranchAddress("Recoilmass", &Recoilmass, &b_Recoilmass);
   fChain->SetBranchAddress("llm4", &llm4, &b_llm4);
   fChain->SetBranchAddress("pipim4", &pipim4, &b_pipim4);
   fChain->SetBranchAddress("llpipi1m4", &llpipi1m4, &b_llpipi1m4);
   fChain->SetBranchAddress("llpipi2m4", &llpipi2m4, &b_llpipi2m4);
   fChain->SetBranchAddress("llpipi3m4", &llpipi3m4, &b_llpipi3m4);
   fChain->SetBranchAddress("llpipi4m4", &llpipi4m4, &b_llpipi4m4);
   fChain->SetBranchAddress("gpipim4", &gpipim4, &b_gpipim4);
   fChain->SetBranchAddress("decay_ee", &decay_ee, &b_decay_ee);
   fChain->SetBranchAddress("hepp", &hepp, &b_hepp);
   fChain->SetBranchAddress("hepm", &hepm, &b_hepm);
   fChain->SetBranchAddress("emcp", &emcp, &b_emcp);
   fChain->SetBranchAddress("emcm", &emcm, &b_emcm);
   fChain->SetBranchAddress("mucp", &mucp, &b_mucp);
   fChain->SetBranchAddress("mucm", &mucm, &b_mucm);
   fChain->SetBranchAddress("zcpm4", &zcpm4, &b_zcpm4);
   fChain->SetBranchAddress("zcmm4", &zcmm4, &b_zcmm4);
   fChain->SetBranchAddress("ecms", &ecms, &b_ecms);
   fChain->SetBranchAddress("angle1", &angle1, &b_angle1);
   fChain->SetBranchAddress("angle2", &angle2, &b_angle2);
   fChain->SetBranchAddress("angle3", &angle3, &b_angle3);
   fChain->SetBranchAddress("angle4", &angle4, &b_angle4);
   fChain->SetBranchAddress("psipm4", &psipm4, &b_psipm4);
   Notify();
}

Bool_t gepep_fastpipill::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void gepep_fastpipill::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t gepep_fastpipill::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
