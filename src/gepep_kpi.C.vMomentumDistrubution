#define gepep_kpi_cxx
#include "gepep_kpi.h"
#include <TH2.h>
#include <TStyle.h>
#include <TCanvas.h>
#include "function.h"
#include "TF1.h"
#include "TGraphErrors.h"
#include <fstream>
#include "RooFit.h"
#include "RooRealVar.h"
#include "RooGaussian.h"
#include "RooChebychev.h"
#include "RooDataHist.h"
#include "RooAddPdf.h"
#include "RooArgList.h"
#include "RooPlot.h"
//#include <iostream>
extern std::string outputdir;
using RooFit::Title;
using RooFit::Components;
using RooFit::LineStyle;
using RooFit::LineColor;
using RooFit::Range;


void gepep_kpi::Loop()
{
//   In a ROOT session, you can do:
//      Root > .L gepep_kpi.C
//      Root > gepep_kpi t
//      Root > t.GetEntry(12); // Fill t data members with entry number 12
//      Root > t.Show();       // Show values of entry 12
//      Root > t.Show(16);     // Read and show values of entry 16
//      Root > t.Loop();       // Loop on all entries
//

//     This is the loop skeleton where:
//    jentry is the global entry number in the chain
//    ientry is the entry number in the current Tree
//  Note that the argument to GetEntry must be:
//    jentry for TChain::GetEntry
//    ientry for TTree::GetEntry and TBranch::GetEntry
//
//       To read only selected branches, Insert statements like:
// METHOD1:
//    fChain->SetBranchStatus("*",0);  // disable all branches
//    fChain->SetBranchStatus("branchname",1);  // activate branchname
// METHOD2: replace line
//    fChain->GetEntry(jentry);       //read all branches
//by  b_branchname->GetEntry(ientry); //read only this branch
   if (fChain == 0) return;

   Long64_t nentries = fChain->GetEntriesFast();

   std::cout<<"Toral entry is "<<nentries<<std::endl;
   int nBins=100;
   double D0low=1.82;
   double D0up=1.90;
   double mk=0.493677;
   double mpi=0.13957018;
   double peakvalue=1.86962;// mD+
  
   ofstream ofpar;
   ofpar.open("par.txt",std::ios::app);
   ofpar<<"k- pi+ algrithm: will give factors for pion"<<std::endl;
   ofstream ofpardetail;
   ofpardetail.open("detail.txt",std::ios::app);

   TH1D *h1   = new TH1D("h1","kaon px",nBins,0,2.0);
   TH1D *h2   = new TH1D("h2","kaon py",nBins,0,2.0);
   TH1D *h3   = new TH1D("h3","kaon pz",nBins,0,2.0);
   TH1D *h4   = new TH1D("h4","kaon p ",nBins,0,2.0);
   TH1D *h5   = new TH1D("h5","kaon px",nBins,0,2.0);
   TH1D *h6   = new TH1D("h6","kaon py",nBins,0,2.0);
   TH1D *h7   = new TH1D("h7","kaon pz",nBins,0,2.0);
   TH1D *h8   = new TH1D("h8","kaon p ",nBins,0,2.0);
   //TH1D *h1   = new TH1D("h1","",nBins,D0low,D0up);
   //TH1D *h1   = new TH1D("h1","",nBins,D0low,D0up);
   //TH1D *h1   = new TH1D("h1","",nBins,D0low,D0up);
   h1->SetLineColor(kBlue);
   h2->SetLineColor(kBlue);
   h3->SetLineColor(kBlue);
   h4->SetLineColor(kBlue);
   h5->SetLineColor(kRed);
   h6->SetLineColor(kRed);
   h7->SetLineColor(kRed);
   h8->SetLineColor(kRed);
   TCanvas *c1= new TCanvas("","",800,600);
   //TCanvas *c2= new TCanvas("","",800,600);
   //TCanvas *c3= new TCanvas("","",800,600);
   //TCanvas *c4= new TCanvas("","",800,600);

   // for saving the fit result
   std::string fitepsname  = outputdir+"/kpispec.eps";
   std::string fiteps_start=fitepsname+"[";
   std::string fiteps_stop =fitepsname+"]";
   c1->Print(fiteps_start.c_str());
 
   Long64_t nbytes = 0, nb = 0;

   //h1->Reset();
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb; 
      //if(ngam>0) continue;
      //if(npip!=2) continue;//D- -> k+ pi- pi-; D+ -> k- pi+ pi+
      double mass;
      double totpx,totpy,totpz,tote;
      double e[3];
      int besidx=0;
      double tmpdeltaold=100;
      double tmpmass;
      totpx=pippx[0]+kampx[0];
      totpy=pippy[0]+kampy[0];
      totpz=pippz[0]+kampz[0];
      tote =pipe[0] +kame[0];
      double kamp = TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      if(mass>D0low && mass<D0up){
        h1->Fill(fabs(kampx[0]));
        h2->Fill(fabs(kampy[0]));
        h3->Fill(fabs(kampz[0]));
        h4->Fill(fabs(kamp ));
      }
      // if (Cut(ientry) < 0) continue;
   } 
   for (Long64_t jentry=0; jentry<nentries;jentry++) {
      Long64_t ientry = LoadTree(jentry);
      if (ientry < 0) break;
      nb = fChain->GetEntry(jentry);   nbytes += nb; 
      //if(ngam>0) continue;
      if(npip!=2) continue;//D- -> k+ pi- pi-; D+ -> k- pi+ pi+
      double mass;
      double totpx,totpy,totpz,tote;
      //double e[3];
      int besidx=0;
      double tmpdeltaold=100;
      double tmpmass;
      totpx=pippx[0]+pippx[1]+kampx[0];
      totpy=pippy[0]+pippy[1]+kampy[0];
      totpz=pippz[0]+pippz[1]+kampz[0];
      tote =pipe[0]+pipe[1]+kame[0];
      double kamp = TMath::Sqrt(kampx[0]*kampx[0]+kampy[0]*kampy[0]+kampz[0]*kampz[0]);
      mass=TMath::Sqrt(tote*tote-totpx*totpx-totpy*totpy-totpz*totpz);
      if(mass>D0low && mass<D0up){
        h5->Fill(fabs(kampx[0]));
        h6->Fill(fabs(kampy[0]));
        h7->Fill(fabs(kampz[0]));
        h8->Fill(fabs(kamp ));
      }
      //h1->Fill(mass);
  // if (Cut(ientry) < 0) continue;
   }
  
   c1->cd();
   h5->Draw();
   h1->Draw("same");
   c1->Print(fitepsname.c_str());
   //c2->cd();
   h6->Draw();
   h2->Draw("same");
   c1->Print(fitepsname.c_str());
   //c3->cd();
   h7->Draw();
   h3->Draw("same");
   c1->Print(fitepsname.c_str());
   //c4->cd();
   h8->Draw();
   h4->Draw("same");
   c1->Print(fitepsname.c_str());
   c1->Print(fiteps_stop.c_str());
   std::cout<<"entry is "<<nentries<<std::endl;
   //c1->Clear();

   ofpar.close();
   ofpardetail.close();

}

#ifdef gepep_kpi_cxx
gepep_kpi::gepep_kpi(TTree *tree) : fChain(0) 
{
// if parameter tree is not specified (or zero), connect the file
// used to generate this class and read the Tree.
   if (tree == 0) {
      TFile *f = (TFile*)gROOT->GetListOfFiles()->FindObject("data/RValue_kpi_3850.root");
      if (!f || !f->IsOpen()) {
         f = new TFile("data/RValue_kpi_3850.root");
      }
      f->GetObject("gepep_kpi",tree);

   }
   Init(tree);
}

gepep_kpi::~gepep_kpi()
{
   if (!fChain) return;
   delete fChain->GetCurrentFile();
}

Int_t gepep_kpi::GetEntry(Long64_t entry)
{
// Read contents of entry.
   if (!fChain) return 0;
   return fChain->GetEntry(entry);
}
Long64_t gepep_kpi::LoadTree(Long64_t entry)
{
// Set the environment to read one entry
   if (!fChain) return -5;
   Long64_t centry = fChain->LoadTree(entry);
   if (centry < 0) return centry;
   if (fChain->GetTreeNumber() != fCurrent) {
      fCurrent = fChain->GetTreeNumber();
      Notify();
   }
   return centry;
}

void gepep_kpi::Init(TTree *tree)
{
   // The Init() function is called when the selector needs to initialize
   // a new tree or chain. Typically here the branch addresses and branch
   // pointers of the tree will be set.
   // It is normally not necessary to make changes to the generated
   // code, but the routine can be extended by the user if needed.
   // Init() will be called many times when running on PROOF
   // (once per file to be processed).

   // Set branch addresses and branch pointers
   if (!tree) return;
   fChain = tree;
   fCurrent = -1;
   fChain->SetMakeClass(1);

   fChain->SetBranchAddress("run", &run, &b_run);
   fChain->SetBranchAddress("rec", &rec, &b_rec);
   fChain->SetBranchAddress("evttag", &evttag, &b_evttag);
   fChain->SetBranchAddress("indexmc", &indexmc, &b_indexmc);
   fChain->SetBranchAddress("pdgid", pdgid, &b_pdgid);
   fChain->SetBranchAddress("motheridx", motheridx, &b_motheridx);
   fChain->SetBranchAddress("ngch", &ngch, &b_ngch);
   fChain->SetBranchAddress("ncharg", &ncharg, &b_ncharg);
   fChain->SetBranchAddress("nneu", &nneu, &b_nneu);
   fChain->SetBranchAddress("nkap", &nkap, &b_nkap);
   fChain->SetBranchAddress("kappx", kappx, &b_kappx);
   fChain->SetBranchAddress("kappy", kappy, &b_kappy);
   fChain->SetBranchAddress("kappz", kappz, &b_kappz);
   fChain->SetBranchAddress("kape", kape, &b_kape);
   fChain->SetBranchAddress("nkam", &nkam, &b_nkam);
   fChain->SetBranchAddress("kampx", kampx, &b_kampx);
   fChain->SetBranchAddress("kampy", kampy, &b_kampy);
   fChain->SetBranchAddress("kampz", kampz, &b_kampz);
   fChain->SetBranchAddress("kame", kame, &b_kame);
   fChain->SetBranchAddress("npip", &npip, &b_npip);
   fChain->SetBranchAddress("pippx", pippx, &b_pippx);
   fChain->SetBranchAddress("pippy", pippy, &b_pippy);
   fChain->SetBranchAddress("pippz", pippz, &b_pippz);
   fChain->SetBranchAddress("pipe", pipe, &b_pipe);
   fChain->SetBranchAddress("npim", &npim, &b_npim);
   fChain->SetBranchAddress("pimpx", pimpx, &b_pimpx);
   fChain->SetBranchAddress("pimpy", pimpy, &b_pimpy);
   fChain->SetBranchAddress("pimpz", pimpz, &b_pimpz);
   fChain->SetBranchAddress("pime", pime, &b_pime);
   fChain->SetBranchAddress("kkm4", &kkm4, &b_kkm4);
   Notify();
}

Bool_t gepep_kpi::Notify()
{
   // The Notify() function is called when a new file is opened. This
   // can be either for a new TTree in a TChain or when when a new TTree
   // is started when using PROOF. It is normally not necessary to make changes
   // to the generated code, but the routine can be extended by the
   // user if needed. The return value is currently not used.

   return kTRUE;
}

void gepep_kpi::Show(Long64_t entry)
{
// Print contents of entry.
// If entry is not specified, print current entry
   if (!fChain) return;
   fChain->Show(entry);
}
Int_t gepep_kpi::Cut(Long64_t entry)
{
// This function may be called from Loop.
// returns  1 if entry is accepted.
// returns -1 otherwise.
   return 1;
}
#endif // #ifdef gepep_kpi_cxx
